//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusicWeb.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;  
    using System.Linq;
    
    public partial class MusicAppDB_new_webEntities : DbContext
    {
        public MusicAppDB_new_webEntities()
            : base("name=MusicAppDB_new_webEntities")
        {
        }



        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<Playlist> Playlists { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Song> Songs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Playlist>().ToTable("Playlist");
            modelBuilder.Entity<Song>().ToTable("Song");
            modelBuilder.Entity<Album>().ToTable("Album");
            modelBuilder.Entity<Artist>().ToTable("Artist");

            // Thiết lập quan hệ nhiều-nhiều giữa Playlist và Song
            modelBuilder.Entity<Playlist>()
                .HasMany(p => p.Songs)
                .WithMany(s => s.Playlists)
                .Map(m =>
                {
                    m.ToTable("PlaylistSong"); // Tên bảng trung gian
                    m.MapLeftKey("PlaylistId"); // Khóa ngoại đến Playlist
                    m.MapRightKey("SongId"); // Khóa ngoại đến Song
                });
        }
        public virtual int AddSongToPlaylist(Nullable<int> playlistId, Nullable<int> songId)
        {
            var playlistIdParameter = playlistId.HasValue ?
                new ObjectParameter("PlaylistId", playlistId) :
                new ObjectParameter("PlaylistId", typeof(int));
    
            var songIdParameter = songId.HasValue ?
                new ObjectParameter("SongId", songId) :
                new ObjectParameter("SongId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSongToPlaylist", playlistIdParameter, songIdParameter);
        }
    
        public virtual int CreatePlaylist(Nullable<int> userId, string playlistName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var playlistNameParameter = playlistName != null ?
                new ObjectParameter("PlaylistName", playlistName) :
                new ObjectParameter("PlaylistName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreatePlaylist", userIdParameter, playlistNameParameter);
        }
    
        public virtual int DeletePlaylist(Nullable<int> playlistId)
        {
            var playlistIdParameter = playlistId.HasValue ?
                new ObjectParameter("PlaylistId", playlistId) :
                new ObjectParameter("PlaylistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePlaylist", playlistIdParameter);
        }
    
        public virtual int DeleteSong(Nullable<int> songId)
        {
            var songIdParameter = songId.HasValue ?
                new ObjectParameter("SongId", songId) :
                new ObjectParameter("SongId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSong", songIdParameter);
        }
    
        public virtual ObjectResult<GetAlbumsByArtist_Result> GetAlbumsByArtist(Nullable<int> artistId)
        {
            var artistIdParameter = artistId.HasValue ?
                new ObjectParameter("ArtistId", artistId) :
                new ObjectParameter("ArtistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAlbumsByArtist_Result>("GetAlbumsByArtist", artistIdParameter);
        }
    
        public virtual int GetSongsByAlbum(Nullable<int> albumId)
        {
            var albumIdParameter = albumId.HasValue ?
                new ObjectParameter("AlbumId", albumId) :
                new ObjectParameter("AlbumId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSongsByAlbum", albumIdParameter);
        }
    
        public virtual int GetSongsByArtist(Nullable<int> artistId)
        {
            var artistIdParameter = artistId.HasValue ?
                new ObjectParameter("ArtistId", artistId) :
                new ObjectParameter("ArtistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSongsByArtist", artistIdParameter);
        }
    
        public virtual int GetSongsInPlaylist(Nullable<int> playlistId)
        {
            var playlistIdParameter = playlistId.HasValue ?
                new ObjectParameter("PlaylistId", playlistId) :
                new ObjectParameter("PlaylistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSongsInPlaylist", playlistIdParameter);
        }
    
        public virtual int RemoveSongFromPlaylist(Nullable<int> playlistId, Nullable<int> songId)
        {
            var playlistIdParameter = playlistId.HasValue ?
                new ObjectParameter("PlaylistId", playlistId) :
                new ObjectParameter("PlaylistId", typeof(int));
    
            var songIdParameter = songId.HasValue ?
                new ObjectParameter("SongId", songId) :
                new ObjectParameter("SongId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveSongFromPlaylist", playlistIdParameter, songIdParameter);
        }
    
        public virtual ObjectResult<SearchMusic_Result> SearchMusic(string searchTerm)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("SearchTerm", searchTerm) :
                new ObjectParameter("SearchTerm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchMusic_Result>("SearchMusic", searchTermParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdatePlaylistName(Nullable<int> playlistId, string newName)
        {
            var playlistIdParameter = playlistId.HasValue ?
                new ObjectParameter("PlaylistId", playlistId) :
                new ObjectParameter("PlaylistId", typeof(int));
    
            var newNameParameter = newName != null ?
                new ObjectParameter("NewName", newName) :
                new ObjectParameter("NewName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePlaylistName", playlistIdParameter, newNameParameter);
        }
    }
}
